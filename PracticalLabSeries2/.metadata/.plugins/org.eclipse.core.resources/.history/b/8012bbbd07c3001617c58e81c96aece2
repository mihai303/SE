module Common

import IO;
import lang::java::m3::Core;
import lang::java::jdt::m3::Core;
import lang::java::m3::AST;
import Prelude;

/*
 * Module Purpose: The Common module stores functionality that is needed by multiple modules
 */

public loc getLocationValue(map[str, loc] mapHash)
{
	for (key <- mapHash)
	{
		return mapHash[key];
		break;
	}
}

/* Note : model@declarations -> rel[loc name,loc src];
*  Purpose: Get the location of the Java files using the model declarations;
*  Return: A list of locations for each Java file in the model;
*/
public list[loc] getAllJavaFilesLocation(M3 model)
{
	return 	[ location | <location, source> <- model@declarations, location.scheme == "java+compilationUnit"];
}

public loc customLocation(loc location, int startLine, int endLine)
{
	int curentLine = 1;
	int offset = 0;
	int textLenght = 0;
	for (line <- readFileLines(location))
	{
		if (curentLine < startLine)
		{
			offset += size(line) + 2;
		}
		
		if (curentLine >= startLine && curentLine <= endLine)
		{
			textLenght += size(line) + 2 ;
		}
		
		curentLine += 1;	
	}

	return location(offset,textLenght,<startLine,0>,<endLine,0>);
}

/* 
*  Purpose: Determine is a string is empty.
*  Return: a boolean value;
*/
public bool isEmptyLine(str line)
{
	return isEmpty(trim(line));
}

/* 
*  Purpose: Precesses each line and revoes inline and multiline comments;
*  Return: A string to string map containig :
*  		   1. The string without comment
*          2. A string that indicates if a multiline comment was still open on the line
*          3. A string that indicates that comments were present
*  * 
*/
public map[str, str] removeComments(str line, str openMultilineComment)
{
	bool betweenSingleQuotes =  false;
	bool betweenDoubleQuotes =  false;
	bool singleLineComment   =  false;
	bool multiLineComment    =  false;	
	bool skipElement         =  false;
	str increaseCommentCount = "false";
	
	if (openMultilineComment == "true")
	{
		multiLineComment = true;
		increaseCommentCount = "true";
	}
	
	str retStr = "";
	str prevElement = "";
	int len = size(line);
	
	for (i <- [0..len])
	{
		if (line[i] == "\'" && betweenSingleQuotes == false)
		{		
			betweenSingleQuotes = true;
		}
		else
		if ((line[i] == "\'" && betweenSingleQuotes == true))
		{
			betweenSingleQuotes = false;
		}
		
		if (line[i] == "\"" && betweenDoubleQuotes == false)
		{		
			betweenDoubleQuotes = true;
		}
		else
		if (line[i] == "\"" && betweenDoubleQuotes == true)
		{
			betweenDoubleQuotes = false;
		}
		
		if (!betweenSingleQuotes && !betweenDoubleQuotes)
		{
			if (prevElement != "")
			{
				if (prevElement == "/" && line[i] == "/")
				{
					singleLineComment = true;
					increaseCommentCount = "true";
					retStr = replaceLast(retStr, "/", "");
				}
				
				if (prevElement == "/" && line[i] == "*")
				{
					multiLineComment = true;
					increaseCommentCount = "true";
					retStr = replaceLast(retStr, "/", "");
				}
				else
				if (prevElement == "*" && line[i] == "/")
				{
					multiLineComment = false;
					skipElement = true;
				}
			}
		}
		
		if (!singleLineComment && !multiLineComment)
		{
			if (skipElement)
			{
				skipElement = false;
			}
			else
			{
				retStr += line[i];
			}
		}				
		
		prevElement = line[i];
	}
	
	if (multiLineComment){ openMultilineComment = "true"; } else { openMultilineComment = "false"; }
	
	return ("retStr"               : retStr,
	        "openMultilineComment" : openMultilineComment,
	        "increaseCommentCount" : increaseCommentCount);

}